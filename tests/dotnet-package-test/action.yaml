name: Build dotnet-container action tests and publishes expected container
description: Test to validate that build dotnet-container action tests and publishes expected container

runs:
  using: composite
  steps:
    - name: Setup test environment
      shell: bash
      run: |
        # Save initial state
        git rev-parse HEAD > /tmp/original_head

    - id: version
      name: Get semantic version
      uses: spritely/actions.semantic-version/get@v0.3.0
      with:
        skipCheckout: true
        writeSummary: false

    - name: Run dotnet-package action
      uses: ./dotnet-package
      with:
        packageRepository: http://build-package-registry/v3/index.json
        nugetAuthToken: fake-token
        projectDirectory: ./tests/dotnet-package-test/half-covered/TestProject
        projectFile: TestProject.csproj
        unitTestProjects: ./tests/dotnet-package-test/half-covered/**/*.UnitTests.csproj
        coverageThreshold: 50
        registryHost: localhost:5000
        registryUsername: testuser
        registryPassword: testpassword
        publishResults: false

    - name: Assert package was published
      uses: devcontainers/ci@v0.3
      with:
        runCmd: |
          source /src/tests/test-reporter.sh
          initialize_test "build dotnet-package action tests and publishes expected package" "dotnet-package-test"
          set_test_name "Assert package was published"

          # Query the NuGet server API to check if the package exists
          response=$(curl -s "http://build-package-registry/v3/registration/testproject/${{ steps.version.outputs.version }}.json" -o /dev/null -w "%{http_code}")

          if [ "$response" -eq 200 ]; then
              success "NuGet package was published successfully"
          else
              failure "NuGet package was not found on the server (HTTP $response)"

              # Try to get package list for debugging
              echo "Search results for 'TestProject':"
              curl -s "http://build-package-registry/v3/search?q=TestProject"
          fi

          success "package published with correct version and content"

          finalize_test

          # Remove all extra files except test-results
          git config --global --add safe.directory /src
          git clean -fdx -e "test-results" -e "/tmp/test-results"
        volumes: "/tmp/test-results:/tmp/test-results"
        push: never

    - name: Clean up test environment
      shell: bash
      if: always()
      run: |
        # Reset repository to original state
        git reset --hard $(cat /tmp/original_head)
