name: Deploy
description: Runs a Pulumi deployment from GitHub actions

inputs:
  command:
    description: The pulumi command to run.
    required: true
  projectName:
    description: The name of the pulumi project to deploy.
    required: false
  projectFolder:
    description: The relative path from workingDirectory where the project files (and pulumi.yaml) can be found. Defaults to root folder.
    required: false
    default: .
  dynamicConfigValues:
    description: "Map of config keys to special dynamic variable names (format: key=outputVariableName). The possible output variables include: version, bootstrapStackName, environment, cloudUrl, secretsProvider, configPassphrase, azureStorageAccount, azureStorageAccountKey, azureSubscriptionId, azureTenantId, azureClientId, azureClientSecret."
    required: false
    default: ""
  configValues:
    description: "Map of config keys to non-secret values (format: key=value)"
    required: false
    default: ""
  configSecrets:
    description: "Map of config keys to secret values (format: key=value)"
    required: false
    default: ""
  prodConfigJson:
    description: Deployment configuration in json format. It is formatted as a simple object with the following keys (set values appropriately) - cloudUrl, secretsProvider, configPassphrase, azureStorageAccount, azureStorageAccountKey, azureSubscriptionId, azureTenantId, azureClientId, azureClientSecret.
    required: true
  devConfigJson:
    description: Deployment configuration in json format. It is formatted as a simple object with the following keys (set values appropriately) - cloudUrl, secretsProvider, configPassphrase, azureStorageAccount, azureStorageAccountKey, azureSubscriptionId, azureTenantId, azureClientId, azureClientSecret.
    required: true
  prodKubeConfig:
    description: The kubeconfig file to use for the prod environment. devKubeConfig must also be set.
    required: false
  devKubeConfig:
    description: The kubeconfig file to use for the dev environment. prodKubeConfig must also be set.
    required: false
  nugetAuthToken:
    description: The NuGet authentication token to use when pulling packages.
    required: false
  branchEnvironmentMap:
    description: A map of branch names to environment names.
    required: false
    default: |
      master=prod
      develop=dev
  workingDirectory:
    description: The directory to run the git commands in. Defaults to ./src/
    required: false
    default: ./src/
  environmentNameMaxLength:
    description: Maximum length for environment name. It will be truncated if necessary. Use -1 for no truncation.
    required: false
    default: '-1'
  pulumiVersion:
    description: The version of pulumi to use.
    required: false
    default: 3.142.0
  buildVersion:
    description: The version reference to use when calling nested actions. Defaults to master
    required: false
    default: master

runs:
  using: composite
  steps:
    - id: version
      name: Get semantic version
      uses: spritely/build/steps/get-semantic-version@${{ inputs.buildVersion }}
      with:
        workingDirectory: ${{ inputs.workingDirectory }}

    - id: setup-dotnet
      name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: ${{ inputs.workingDirectory }}/global.json

    - id: stack
      name: Select stack
      shell: bash
      working-directory: ${{ inputs.workingDirectory }}
      run: |
        branch_environment_map=$(cat << EOF
        ${{ inputs.branchEnvironmentMap }}
        EOF
        )

        echo Branch environment map:
        echo "$branch_environment_map"

        # Get all base_environments from branch_environment_map
        base_environments=($(echo "$branch_environment_map" | cut -d= -f2))

        # By default bootstrapStackName=prod when in the default branch and not a delete event, otherwise bootstrapStackName=dev
        bootstrapStackName=${{ steps.version.outputs.branchName == github.event.repository.default_branch && github.event_name != format('delete') && format('prod') || format('dev') }}

        # If bootstrapStackName isn't found in the base_environments array, then use the first environment (normally 'prod')
        if ! printf '%s\n' "${base_environments[@]}" | grep -q "^${bootstrapStackName}$"; then
            bootstrapStackName="${base_environments[0]}"
        fi

        # Set output variables
        echo bootstrapStackName: $bootstrapStackName
        echo bootstrapStackName=$bootstrapStackName >> $GITHUB_OUTPUT

    - name: Prepare deployment config
      uses: DamianReeves/write-file-action@v1.3
      with:
        path: ${{ github.workspace }}/config/deployment.json
        contents: ${{ steps.stack.outputs.bootstrapStackName == format('prod') && inputs.prodConfigJson || inputs.devConfigJson }}
        write-mode: overwrite

    - name: Prepare kubeconfig
      if: ${{ inputs.prodKubeConfig && inputs.devKubeConfig }}
      uses: DamianReeves/write-file-action@v1.3
      with:
        path: ${{ github.workspace }}/config/kubeConfig
        contents: ${{ steps.stack.outputs.bootstrapStackName == format('prod') && inputs.prodKubeConfig || inputs.devKubeConfig }}
        write-mode: overwrite

    - id: configure
      name: Read deployment settings
      shell: bash
      working-directory: ${{ inputs.workingDirectory }}
      run: |
        branch_environment_map=$(cat << EOF
        ${{ inputs.branchEnvironmentMap }}
        EOF
        )

        current_branch="${{ github.ref_name }}"
        if [ "${{ github.event_name }}" = "delete" ]; then
          # For delete events, extract the branch name from github.event.ref
          current_branch=$(echo "${{ github.event.ref }}" | sed 's|refs/heads/||')
        fi

        echo Using branch: $current_branch

        # Get the environment value from the branch environment map
        environment=$(echo "${branch_environment_map}" | grep "^${current_branch}=" | cut -d '=' -f2 || true)
        if [ -z "$environment" ]; then
          echo "No matching environment found for branch ${current_branch}"
          echo Deriving an environment name from the branch name
          environment=${current_branch}
        fi

        environment=$(echo "$environment" | \
            tr '[:upper:]' '[:lower:]' |             # Convert to lowercase
            sed 's/[^a-z0-9-]/-/g' |                 # Replace invalid characters with hyphens
            sed 's/-\{2,\}/-/g' |                    # Replace multiple hyphens with single hyphen
            sed 's/^-//;s/-$//')                     # Remove leading/trailing hyphens

        # Truncate environment name if necessary
        max_length=${{ inputs.environmentNameMaxLength }}
        if [ $max_length -ge 0 ] && [ ${#environment} -gt $max_length ]; then
            truncated=$(echo "$environment" | cut -c1-$max_length)

            # If it ends with a hyphen, try to get one more non-hyphen character if available
            if [[ "$truncated" =~ -$ ]]; then
                remaining=$(echo "$environment" | cut -c$(($max_length + 1))-)  # Get remaining text
                remaining=$(echo "$remaining" | sed 's/-//g')                   # Remove all hyphens
                if [ -n "$remaining" ]; then                                    # If anything remains
                    truncated="$truncated${remaining:0:1}"                      # Add first character
                fi
            fi

            # Remove trailing hyphen if still present
            environment=$(echo "$truncated" | sed 's/-$//')
        fi

        echo Using environment name: $environment

        echo "# Deployment Configuration" >> $GITHUB_STEP_SUMMARY
        echo dotnetVersion=${{ steps.setup-dotnet.outputs.dotnet-version }} >> $GITHUB_OUTPUT
        echo dotnet version: ${{ steps.setup-dotnet.outputs.dotnet-version }} >> $GITHUB_STEP_SUMMARY

        echo Current branch: $current_branch >> $GITHUB_STEP_SUMMARY

        echo environment=$environment >> $GITHUB_OUTPUT
        echo Environment: $environment >> $GITHUB_STEP_SUMMARY

        # Output variables named with pascalFormat convention
        pulumiRefresh=true
        pulumiUpsert=true
        pulumiRemove=false

        command="${{ inputs.command }}"
        command=$(echo $command | tr '[:upper:]' '[:lower:]')
        if [[ "${command}" = "destroy" ]]; then
            pulumiRefresh=false
            pulumiUpsert=false
            pulumiRemove=true
        fi

        echo pulumiRefresh=$pulumiRefresh >> $GITHUB_OUTPUT
        echo pulumiUpsert=$pulumiUpsert >> $GITHUB_OUTPUT
        echo pulumiRemove=$pulumiRemove >> $GITHUB_OUTPUT

        echo Refresh: $pulumiRefresh
        echo Upsert: $pulumiUpsert
        echo Remove: $pulumiRemove

        # Create one environment variable for each field in the json config file
        cat ${{ github.workspace }}/config/deployment.json | jq -r 'to_entries[] | "\(.key)=\"\(.value | gsub("\""; "\\\""))\""' > ${{ github.workspace }}/config/deployment.env

        source ${{ github.workspace }}/config/deployment.env

        # Mask secrets
        echo "::add-mask::$configPassphrase"
        echo "::add-mask::$azureStorageAccountKey"
        echo "::add-mask::$azureClientSecret"

        echo cloudUrl: $cloudUrl
        echo secretsProvider: $secretsProvider
        echo azureStorageAccount: $azureStorageAccount
        echo azureSubscriptionId: $azureSubscriptionId
        echo azureTenantId: $azureTenantId
        echo azureClientId: $azureClientId

        # Set output variables
        echo cloudUrl=$cloudUrl >> $GITHUB_OUTPUT
        echo secretsProvider=$secretsProvider >> $GITHUB_OUTPUT
        echo azureStorageAccount=$azureStorageAccount >> $GITHUB_OUTPUT
        echo azureSubscriptionId=$azureSubscriptionId >> $GITHUB_OUTPUT
        echo azureTenantId=$azureTenantId >> $GITHUB_OUTPUT
        echo azureClientId=$azureClientId >> $GITHUB_OUTPUT

        echo "configPassphrase=$configPassphrase" >> $GITHUB_OUTPUT
        echo "azureStorageAccountKey=$azureStorageAccountKey" >> $GITHUB_OUTPUT
        echo "azureClientSecret=$azureClientSecret" >> $GITHUB_OUTPUT

        # Make some values from other steps available to this script
        version=${{ steps.version.outputs.version }}
        bootstrapStackName=${{ steps.stack.outputs.bootstrapStackName }}
        projectName="${{ inputs.projectName }}"

        secret_variables=("configPassphrase" "azureStorageAccountKey" "azureClientSecret")

        # Utility functions for creating json content
        add_value() {
          local escaped_value=$(echo "$2" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "\"$projectName:$1\": { \"value\": \"$escaped_value\", \"secret\": false }"
        }

        add_secret() {
          local escaped_value=$(echo "$2" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "\"$projectName:$1\": { \"value\": \"$escaped_value\", \"secret\": true }"
        }

        # Collect json key/values in this array - values will be output of add_value or add_secret
        declare -A config_entries

        # This while loop reads the dynamicConfigValues line by line
        # Example input might look like:
        #   myEnvVar=environment
        #   myStack=bootstrapStackName
        while IFS='=' read -r key variable_name; do
          [ -z "$key" ] && continue # Skip empty lines

          key=$(echo "$key" | tr -d '[:space:]')
          variable_name=$(echo "$variable_name" | tr -d '[:space:]')

          # Use the user defined key to read variable value as defined in this script (environment, bootstrapStackName, etc)
          value=${!variable_name}

          # Regex comparison checks for an exact match in a space separated list
          # Example: Find " configPassphrase " in " configPassphrase azureStorageAccountKey azureClientSecret "
          if [[ " ${secret_variables[@]} " =~ " ${variable_name} " ]]; then
            echo "Setting configMap.$projectName:$key=[secret]"
            config_entries["$key"]="$(add_secret "$key" "$value")"
          else
            echo "Setting configMap.$projectName:$key=$value"
            config_entries["$key"]="$(add_value "$key" "$value")"
          fi

        done << EOF
        ${{ inputs.dynamicConfigValues }}
        EOF

        # Process non-secret values
        while IFS='=' read -r key value; do
          [ -z "$key" ] && continue # Skip empty lines

          key=$(echo "$key" | tr -d '[:space:]')
          value=$(echo "$value" | tr -d '[:space:]')

          # Check if key has base64: prefix
          if [[ "$key" =~ ^base64: ]]; then
            # Strip the prefix and decode the value
            key=${key#base64:}
            echo "Base64 decoding $key=$value"
            value=$(echo "$value" | base64 -d || echo "$value")
          fi

          echo "Setting configMap.$projectName:$key=$value"
          config_entries["$key"]="$(add_value "$key" "$value")"

        done << EOF
        ${{ inputs.configValues }}
        EOF

        # Process secret values
        while IFS='=' read -r key value; do
          [ -z "$key" ] && continue # Skip empty lines

          key=$(echo "$key" | tr -d '[:space:]')
          value=$(echo "$value" | tr -d '[:space:]')

          # Check if key has base64: prefix
          if [[ "$key" =~ ^base64: ]]; then
            # Strip the prefix and decode the value
            key=${key#base64:}
            echo "Base64 decoding $key"
            value=$(echo "$value" | base64 -d || echo "$value")
          fi

          echo "Setting configMap.$projectName:$key=[secret]"
          config_entries["$key"]="$(add_secret "$key" "$value")"

        done << EOF
        ${{ inputs.configSecrets }}
        EOF

        # Build final config map
        configMap="{"
        first=true

        for value in "${config_entries[@]}"; do
          if [ "$first" = true ]; then
            first=false
          else
            configMap+=","
          fi
          configMap+="$value"
        done

        configMap+="}"

        echo "::add-mask::$configMap"
        echo "configMap=$configMap" >> $GITHUB_OUTPUT

    - name: Deploy
      uses: pulumi/actions@v6
      with:
        command: ${{ inputs.command }}
        stack-name: organization/${{ inputs.projectName }}/${{ steps.configure.outputs.environment }}
        work-dir: ${{ inputs.workingDirectory }}/${{ inputs.projectFolder }}
        config-map: ${{ steps.configure.outputs.configMap }}
        pulumi-version: ${{ inputs.pulumiVersion }}
        refresh: ${{ steps.configure.outputs.pulumiRefresh }}
        upsert: ${{ steps.configure.outputs.pulumiUpsert }}
        remove: ${{ steps.configure.outputs.pulumiRemove }}
        suppress-progress: true
        comment-on-summary: true
        always-include-summary: true
        cloud-url: ${{ steps.configure.outputs.cloudUrl }}
        secrets-provider: ${{ steps.configure.outputs.secretsProvider }}
      env:
        PULUMI_CONFIG_PASSPHRASE: ${{ steps.configure.outputs.configPassphrase }}
        AZURE_STORAGE_ACCOUNT: ${{ steps.configure.outputs.azureStorageAccount }}
        AZURE_STORAGE_KEY: ${{ steps.configure.outputs.azureStorageAccountKey }}
        ARM_SUBSCRIPTION_ID: ${{ steps.configure.outputs.azureSubscriptionId }}
        ARM_TENANT_ID: ${{ steps.configure.outputs.azureTenantId }}
        ARM_CLIENT_ID: ${{ steps.configure.outputs.azureClientId }}
        ARM_CLIENT_SECRET: ${{ steps.configure.outputs.azureClientSecret }}
        AZURE_TENANT_ID: ${{ steps.configure.outputs.azureTenantId }}
        AZURE_CLIENT_ID: ${{ steps.configure.outputs.azureClientId }}
        AZURE_CLIENT_SECRET: ${{ steps.configure.outputs.azureClientSecret }}
        KUBECONFIG: ${{ github.workspace }}/config/kubeConfig
        NUGET_USER: ${{ github.actor }}
        NUGET_TOKEN: ${{ inputs.nugetAuthToken }}
