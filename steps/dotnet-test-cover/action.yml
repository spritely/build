name: Unit test with code coverage
description: Runs dotnet test on all unitTestProjects, collects code coverage, and reports test and coverage results.

inputs:
  nugetAuthToken:
    description: The NuGet authentication token to use when pushing or pulling packages.
    required: true
  registryUsername:
    description: The username to use to authenticate with the container registry.
    required: true
  registryPassword:
    description: The token to use to authenticate with the container registry.
    required: true
  unitTestProjects:
    # It is important to only pass 'Unit' test projects since the build won't be deployed yet and thus these tests cannot depend on anything in the environment to run
    description: The path to all unit tests projects to run. Defaults to **/*.UnitTests.csproj
    required: false
    default: "**/*.UnitTests.csproj"
  coverageThreshold:
    description: The minimum code coverage percentage required for the build to pass. Defaults to 90
    required: false
    default: "90"
  workingDirectory:
    description: The directory to run the git commands in. Defaults to ./src/
    required: false
    default: ./src/
  registryHost:
    description: The host of the container registry to push to. Defaults to ghcr.io
    required: false
    default: ghcr.io

runs:
  using: composite
  steps:
    - id: findProjects
      name: Find unit test projects - ${{ inputs.unitTestProjects }}
      shell: bash
      working-directory: ${{ inputs.workingDirectory }}
      run: |
        tests_exist=false
        if test -n "$(find . -type f -iwholename "${{ inputs.unitTestProjects }}" -print -quit)"; then
            echo "Found unit test projects matching ${{ inputs.unitTestProjects }}"
            tests_exist=true
        else
            echo "No unit test projects found matching ${{ inputs.unitTestProjects }}"
            echo "Skipping remaining unit test tasks";
        fi
        echo "testsExist=$tests_exist" >> $GITHUB_OUTPUT

    - name: Login to GitHub Container Registry
      if: steps.findProjects.outputs.testsExist == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registryHost }}
        username: ${{ inputs.registryUsername }}
        password: ${{ inputs.registryPassword }}

    - name: Create .env for build
      if: steps.findProjects.outputs.testsExist == 'true'
      shell: bash
      working-directory: ${{ inputs.workingDirectory }}
      run: |
        cat > ./.devcontainer/.env <<EOF
        EOF

    - name: dotnet test Release
      if: steps.findProjects.outputs.testsExist == 'true'
      uses: devcontainers/ci@v0.3
      with:
        subFolder: ${{ inputs.workingDirectory }}
        runCmd: |
          chmod +x ./test.sh
          ./test.sh
        push: never
        env: |
          NUGET_USER=${{ github.actor }}
          NUGET_TOKEN=${{ inputs.nugetAuthToken }}

    - name: Publish test results
      if: steps.findProjects.outputs.testsExist == 'true' && always()
      uses: dorny/test-reporter@v1
      with:
        name: Unit Test Results
        reporter: dotnet-trx
        path: "**/*.trx"
        working-directory: ${{ inputs.workingDirectory }}

    - name: Publish code coverage report
      if: steps.findProjects.outputs.testsExist == 'true' && always()
      shell: bash
      working-directory: ${{ inputs.workingDirectory }}
      run: cat ./TestResults/Coverage/Reports/SummaryGithub.md >> $GITHUB_STEP_SUMMARY

    - name: Check for passing code coverage
      if: steps.findProjects.outputs.testsExist == 'true' && always()
      shell: bash
      working-directory: ${{ inputs.workingDirectory }}
      run: |
        # | **Line coverage:** | 92.6% (830 of 896) | -> 92.6% (830 of 896) -> 92.6%
        coverage=$(grep "\*\*Line coverage:\*\*" ./TestResults/Coverage/Reports/SummaryGithub.md | awk -F '|' '{print $3}' | awk '{print $1}')
        # Remove the '%' sign for comparison
        coverage=${coverage%\%}
        if (( $(echo "$coverage < ${{ inputs.coverageThreshold }}" | bc -l) )); then
          echo "Code coverage must be at least ${{ inputs.coverageThreshold }}%, but was $coverage%"
          echo "# Code coverage Failure" >> $GITHUB_STEP_SUMMARY
          echo "Code coverage must be at least ${{ inputs.coverageThreshold }}%, but was $coverage%" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
